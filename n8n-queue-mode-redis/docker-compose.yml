# ---------------------------------------------------------------
# N8N Queue Mode with Redis
# ---------------------------------------------------------------

# Docker Compose configuration for n8n in queue mode with Redis message broker.
# This setup includes: PostgreSQL database, Redis, main n8n instance, and worker instances.
# Queue mode provides better scalability for high-volume workflow executions.

services:
  # PostgreSQL Database Service
  postgres:
    # Uses the official PostgreSQL version 17 image, based on Alpine Linux for a smaller size.
    image: postgres:17-alpine
    # Restart policy: the container will restart automatically unless it is manually stopped.
    restart: unless-stopped
    # Environment variables for database configuration.
    environment:
      - POSTGRES_USER=${POSTGRES_USER}          # Username for the database.
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}  # Password for the user.
      - POSTGRES_DB=${POSTGRES_DB}              # Name of the database to be created.
    # Volume for PostgreSQL data persistence.
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # Healthcheck to ensure the database is ready to accept connections.
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      start_period: 30s
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Message Broker Service
  # Redis acts as the message queue between the main instance and workers.
  redis:
    # Uses the official Redis version 7 image, based on Alpine Linux.
    image: redis:8-alpine
    # Restart policy: the container will restart automatically unless it is manually stopped.
    restart: unless-stopped
    # Volume for Redis data persistence.
    volumes:
      - redis_data:/data
    # Healthcheck to ensure Redis is ready to accept connections.
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main n8n Instance
  # Handles the UI, webhooks, triggers, and delegates workflow executions to workers.
  n8n-main:
    # Uses a specific version of the n8n image to ensure stability.
    image: n8nio/n8n:1.116.2
    # Restart policy: the container will restart automatically unless it is manually stopped.
    restart: unless-stopped
    # Expose the n8n port to the host machine.
    ports:
      - "${N8N_PORT:-5678}:5678"
    # Ensure PostgreSQL and Redis are healthy before starting.
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Environment variables for n8n main instance configuration.
    environment:
      # --- Execution Mode ---
      - EXECUTIONS_MODE=queue                   # Enable queue mode for distributed execution.

      # --- Database Connection Configuration ---
      - DB_TYPE=postgresdb                      # Specifies the type of database to use.
      - DB_POSTGRESDB_HOST=postgres             # Database host (the name of the 'postgres' service).
      - DB_POSTGRESDB_PORT=5432                 # Database port.
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}   # Database name (must match the one for PostgreSQL).
      - DB_POSTGRESDB_USER=${POSTGRES_USER}     # Username for the database.
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD} # Password for the database.

      # --- Redis Configuration ---
      # Redis is used as the message broker for the queue.
      - QUEUE_BULL_REDIS_HOST=redis             # Redis host (the name of the 'redis' service).
      - QUEUE_BULL_REDIS_PORT=6379              # Redis port (default: 6379).
      - QUEUE_BULL_REDIS_DB=0                   # Redis database number (default: 0).
      - QUEUE_BULL_REDIS_TIMEOUT_THRESHOLD=10000 # Timeout threshold in milliseconds before exiting if Redis is unavailable.
      - N8N_GRACEFUL_SHUTDOWN_TIMEOUT=30        # Graceful shutdown timeout in seconds for workers to finish jobs.

      # --- Security & Encryption ---
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY} # Secret key to encrypt sensitive data (credentials). Must be shared with all workers.
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true # Enforces strict file permissions for the configuration.
      - N8N_SECURE_COOKIE=true                  # Uses secure cookies (recommended in production with HTTPS).

      # --- Host & Network Settings ---
      - N8N_HOST=${N8N_HOST}                    # Domain name or host on which n8n is accessible.
      - N8N_PORT=5678                           # Port on which n8n listens.
      - N8N_PROTOCOL=https                      # Protocol to use (http or https).
      - NODE_ENV=production                     # Sets the Node.js execution environment to 'production' for better performance.
      - WEBHOOK_URL=https://${N8N_HOST}/        # Base URL for webhooks.
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}    # Timezone for workflows (e.g., 'Europe/Paris').

      # --- Proxy Configuration ---
      # Useful if n8n is behind a reverse proxy (like Nginx or Traefik).
      - N8N_TRUST_PROXY=true                    # Tells n8n to trust X-Forwarded-* headers.
      - N8N_PROXY_HOPS=1                        # Number of proxies between the client and the server.

      # --- Performance, Cleanup & Future Compatibility ---
      - EXECUTIONS_DATA_PRUNE=true              # Enables automatic pruning of past execution data.
      - EXECUTIONS_DATA_MAX_AGE=168             # Maximum age (in hours) of execution data to keep (here, 7 days).
      - N8N_PERSONALIZATION_ENABLED=false       # Disables the collection of personalization data.
      - N8N_TEMPLATES_ENABLED=true              # Enables access to workflow templates.
      - N8N_RUNNERS_ENABLED=true                # Enables task runners for isolated and secure workflow execution.
      - N8N_BLOCK_ENV_ACCESS_IN_NODE=false      # Allows access to environment variables in code nodes (use with caution).
      - N8N_GIT_NODE_DISABLE_BARE_REPOS=true    # Security setting for the Git node.
    # Volume for n8n data persistence (workflows, credentials, etc.).
    volumes:
      - n8n_data:/home/node/.n8n

  # Worker Instance 1
  # Executes workflows from the queue. Can run multiple workflows in parallel based on concurrency setting.
  n8n-worker-1:
    # Uses the same n8n image version as the main instance.
    image: n8nio/n8n:1.116.2
    # Restart policy: the container will restart automatically unless it is manually stopped.
    restart: unless-stopped
    # Run n8n in worker mode with concurrency of 10 (can handle 10 parallel workflow executions).
    command: worker --concurrency=10
    # Ensure PostgreSQL and Redis are healthy before starting.
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Environment variables for worker configuration.
    environment:
      # --- Execution Mode ---
      - EXECUTIONS_MODE=queue                   # Enable queue mode.

      # --- Database Connection Configuration ---
      # Workers need database access to read workflow definitions and write execution results.
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}

      # --- Redis Configuration ---
      # Workers connect to Redis to pick up jobs from the queue.
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - QUEUE_BULL_REDIS_DB=0
      - QUEUE_BULL_REDIS_TIMEOUT_THRESHOLD=10000
      - N8N_GRACEFUL_SHUTDOWN_TIMEOUT=30

      # --- Security & Encryption ---
      # IMPORTANT: Must use the same encryption key as the main instance to access credentials.
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}

      # --- Worker Settings ---
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}    # Timezone for workflow executions.
      - N8N_RUNNERS_ENABLED=true                # Enables task runners for isolated execution.
    # Shared volume to access workflow data.
    volumes:
      - n8n_data:/home/node/.n8n

  # Worker Instance 2 (Optional - Commented Out)
  # Uncomment this section to add a second worker for increased capacity.
  # You can add more workers to scale horizontally based on your workload.
  # To add more workers, duplicate this service and rename it (e.g., n8n-worker-3, n8n-worker-4).
  
  # n8n-worker-2:
  #   # Uses the same n8n image version as the main instance.
  #   image: n8nio/n8n:1.116.2
  #   # Restart policy: the container will restart automatically unless it is manually stopped.
  #   restart: unless-stopped
  #   # Run n8n in worker mode with concurrency of 10.
  #   command: worker --concurrency=10
  #   # Ensure PostgreSQL and Redis are healthy before starting.
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   # Environment variables for worker configuration (same as worker-1).
  #   environment:
  #     # --- Execution Mode ---
  #     - EXECUTIONS_MODE=queue
  #
  #     # --- Database Connection Configuration ---
  #     - DB_TYPE=postgresdb
  #     - DB_POSTGRESDB_HOST=postgres
  #     - DB_POSTGRESDB_PORT=5432
  #     - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
  #     - DB_POSTGRESDB_USER=${POSTGRES_USER}
  #     - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
  #
  #     # --- Redis Configuration ---
  #     - QUEUE_BULL_REDIS_HOST=redis
  #     - QUEUE_BULL_REDIS_PORT=6379
  #     - QUEUE_BULL_REDIS_DB=0
  #     - QUEUE_BULL_REDIS_TIMEOUT_THRESHOLD=10000
  #     - N8N_GRACEFUL_SHUTDOWN_TIMEOUT=30
  #
  #     # --- Security & Encryption ---
  #     - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
  #
  #     # --- Worker Settings ---
  #     - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
  #     - N8N_RUNNERS_ENABLED=true
  #   # Shared volume to access workflow data.
  #   volumes:
  #     - n8n_data:/home/node/.n8n

# Definition of named volumes to ensure data persistence
# even if the containers are removed and recreated.
volumes:
  n8n_data:        # Stores n8n workflows, credentials, and configuration.
  postgres_data:   # Stores PostgreSQL database data.
  redis_data:      # Stores Redis queue data.
